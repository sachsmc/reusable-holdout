## Code to reproduce the simulations reported in Dwork et al. (2015) The reusable holdout: Preserving validity in adaptive data analysis.
library(reshape2)
library(ggplot2)
createnosignaldata <- function(n, d){
train <- data.frame(Y = rnorm(n), X = matrix(rnorm(n * d), nrow = n))
holdout <- data.frame(Y = rnorm(n), X = matrix(rnorm(n * d), nrow = n))
test <- data.frame(Y = rnorm(n), X = matrix(rnorm(n * d), nrow = n))
list(train = train, holdout = holdout, test = test)
}
add_bias <- function(set, nbiased = 50, size = .1){
set[, 2:(2 + nbiased)] <- set[, 2:(2 + nbiased)] + set[, 1] * size
set
}
createhighsignaldata <- function(n, d){
train <- add_bias(data.frame(Y = rnorm(n), X = matrix(rnorm(n * d), nrow = n)))
holdout <- add_bias(data.frame(Y = rnorm(n), X = matrix(rnorm(n * d), nrow = n)))
test <- add_bias(data.frame(Y = rnorm(n), X = matrix(rnorm(n * d), nrow = n)))
list(train = train, holdout = holdout, test = test)
}
runClassifier <- function(n, d, krange, dataList, threshold = .1, tolerance = .05){
# select based on correlation with combined sample
cor.train <- cor(dataList$train)[1, -1]
cor.hold <- cor(dataList$holdout)[1, -1]
check <- cor.train[sign(cor.train) == sign(cor.hold)]
## thresholdout selection
diffs <- abs(cor.train - cor.hold)
abovethresh <- diffs > threshold + rnorm(d, 0, tolerance)
cor.threshold <- cor.hold + rnorm(d, 0, tolerance)
cor.threshold[!abovethresh] <- cor.train[!abovethresh]
check.thresh <- cor.threshold[sign(cor.train) == sign(cor.threshold)]
vals <- data.frame(krange = krange, ftrain = NA, fholdout = NA, ftest = NA,
fthresholdout = NA, fstrict = NA, ftest.thresh = NA)
for(k in krange){
vars <- names(sort(abs(check), decreasing = TRUE)[1:k])
form <- as.formula(paste("Y ~ ", paste(vars, collapse = " + ")))
fit.train <- lm(form, data = dataList$train)
ftrain <- mean((dataList$train$Y - fit.train$fitted)^2)
fholdout <- mean((dataList$holdout$Y - predict(fit.train, newdata = dataList$holdout))^2)
ftest <- mean((dataList$test$Y - predict(fit.train, newdata = dataList$test))^2)
vals[vals$krange == k, ]$ftrain <- ftrain
vals[vals$krange == k, ]$fholdout <- fholdout
vals[vals$krange == k, ]$ftest <- ftest
## implement thresholdout
vars2 <- names(sort(abs(check.thresh), decreasing = TRUE)[1:k])
form2 <- as.formula(paste("Y ~ ", paste(vars2, collapse = " + ")))
fit.train2 <- lm(form2, data = dataList$train)
ftrain <- mean((dataList$train$Y - fit.train2$fitted)^2)
fholdout <- mean((dataList$holdout$Y - predict(fit.train2, newdata = dataList$holdout))^2)
ftest <- mean((dataList$test$Y - predict(fit.train2, newdata = dataList$test))^2)
threshtest <- abs(ftrain - fholdout) < threshold + rnorm(1, 0, tolerance)
fthresholdout <- ifelse(threshtest, ftrain, fholdout + rnorm(1, 0, tolerance))
vals[vals$krange == k, ]$fthresholdout <- fthresholdout
vals[vals$krange == k, ]$ftest.thresh <- ftest
## strict variable selection
vars3 <- names(sort(abs(cor.train), decreasing = TRUE)[1:k])
form3 <- as.formula(paste("Y ~ ", paste(vars3, collapse = " + ")))
fit.train3 <- lm(form3, data = dataList$train)
fholdout <- mean((dataList$holdout$Y - predict(fit.train3, newdata = dataList$holdout))^2)
vals[vals$krange == k, ]$fstrict <- fholdout
}
vals
}
listMean <- function(lmats, keepcol = 1){
res <- matrix(0, nrow = nrow(lmats[[1]]), ncol = ncol(lmats[[1]]))
for(i in 1:length(lmats)){
res <- res + lmats[[i]]
}
ret <- res/length(lmats)
ret[, keepcol] <- lmats[[1]][, keepcol]
ret
}
listSd <- function(lmats, keepcol = 1){
res <- matrix(0, nrow = nrow(lmats[[1]]), ncol = ncol(lmats[[1]]))
means <- listMean(lmats)
for(i in 1:length(lmats)){
res <- res + (lmats[[i]] - means)^2
}
ret <- sqrt(res/length(res))
ret[, keepcol] <- lmats[[1]][, keepcol]
ret
}
repeatexp <- function(n, d, krange, reps, datafn, threshold = .1, tolerance = .04){
res <- vector(mode = "list", length = reps)
for(i in 1:reps){
dataList <- datafn(n, d)
res[[i]] <- runClassifier(n, d, krange, dataList, threshold, tolerance)
}
list(mean = listMean(res), sd = listSd(res))
}
plotme <- function(nosignal){
nosigsum <- merge(melt(nosignal$mean, id.vars = "krange"),
melt(as.data.frame(nosignal$sd), id.vars = "krange"),
by = c("krange", "variable"))
colnames(nosigsum) <- c("krange", "setting", "error", "sd")
ggplot(nosigsum, aes(x = krange, y = error, ymin = error - sd, ymax = error + sd,
shape = setting, color = setting, fill = setting)) +
geom_point() + geom_line() + geom_ribbon(color = NA, alpha = .2) +
scale_color_brewer(type = "qual", palette = 2) + scale_fill_brewer(type = "qual", palette = 2)
}
nosignal <- repeatexp(2000, 2000, krange = c(5, 10, 20, 50, 100, 150, 200, 250, 300, 400, 500),
reps = 20, datafn = createnosignaldata)
plotme(nosignal)
highsignal <- repeatexp(2000, 2000, krange = c(5, 10, 20, 50, 100, 150, 200, 250, 300, 400, 500),
reps = 20, datafn = createhighsignaldata, .1, .05)
plotme(highsignal)
library(ggplto2)
library(ggplot2)
?stat_function
ggplot(data.frame(x = rep(c(-5, 5), 3), col = c(1, 1, 2, 2, 3, 3)), aes(x = x, color = col)) + geom_function(fun = dnorm)
ggplot(data.frame(x = rep(c(-5, 5), 3), col = c(1, 1, 2, 2, 3, 3)), aes(x = x, color = col)) + stat_function(fun = dnorm)
plotbud <- function(n, tau){
tau^2 * n^2/(512 * log(8/.05))
}
ggplot(data.frame(n = c(0, 2000)), aes(x = n)) + stat_function(fun = plotbud, args = list(tau = .025))
ggplot(data.frame(n = c(0, 5000)), aes(x = n)) +
stat_function(fun = plotbud, args = list(tau = .025), color = "darkblue") +
stat_function(fun = plotbud, args = list(tau = .05), color = "lightblue") +
stat_function(fun = plotbud, args = list(tau = .1), color = "periwinkle")
colors()
grep("blue", colors())
grep("blue", colors(), value = TRUE)
ggplot(data.frame(n = c(0, 5000)), aes(x = n)) +
stat_function(fun = plotbud, args = list(tau = .025), color = "darkblue") +
stat_function(fun = plotbud, args = list(tau = .05), color = "lightblue") +
stat_function(fun = plotbud, args = list(tau = .1), color = "aliceblue")
ggplot(data.frame(n = c(0, 2000)), aes(x = n)) +
stat_function(fun = plotbud, args = list(tau = .025), color = "darkblue", lwd = 2) +
stat_function(fun = plotbud, args = list(tau = .05), color = "lightblue", lwd =2 ) +
stat_function(fun = plotbud, args = list(tau = .1), color = "aliceblue", lwd = 2)
?scale_color_manual
ggplot(data.frame(n = c(0, 2000)), aes(x = n)) +
stat_function(fun = plotbud, args = list(tau = .025), color = "darkblue", lwd = 2) +
stat_function(fun = plotbud, args = list(tau = .05), color = "lightblue", lwd =2 ) +
stat_function(fun = plotbud, args = list(tau = .1), color = "aliceblue", lwd = 2) +
scale_y_continuous("Budget") + scale_color_manual("tau", breaks = c("darkblue", "lightblue", "aliceblue"))
ggplot(data.frame(n = c(0, 2000)), aes(x = n)) +
stat_function(fun = plotbud, args = list(tau = .025), color = "darkblue", lwd = 2) +
stat_function(fun = plotbud, args = list(tau = .05), color = "lightblue", lwd =2 ) +
stat_function(fun = plotbud, args = list(tau = .1), color = "aliceblue", lwd = 2) +
scale_y_continuous("Budget") + scale_color_manual("tau", breaks = c("darkblue", "lightblue", "aliceblue"), values = c(.025, .5, .1))
ggplot(data.frame(n = c(0, 2000)), aes(x = n)) +
stat_function(fun = plotbud, args = list(tau = .025), aes(color = "darkblue", lwd = 2)) +
stat_function(fun = plotbud, args = list(tau = .05), color = "lightblue", lwd =2 ) +
stat_function(fun = plotbud, args = list(tau = .1), color = "aliceblue", lwd = 2) +
scale_y_continuous("Budget") + scale_color_manual("tau", breaks = c("darkblue", "lightblue", "aliceblue"), values = c(.025, .5, .1))
ggplot(data.frame(n = c(0, 2000)), aes(x = n)) +
stat_function(fun = plotbud, args = list(tau = .025), aes(color = "darkblue"), lwd = 2)) +
stat_function(fun = plotbud, args = list(tau = .05), aes(color = "lightblue"), lwd =2 ) +
stat_function(fun = plotbud, args = list(tau = .1), aes(color = "aliceblue"), lwd = 2) +
scale_y_continuous("Budget") + scale_color_manual("tau", breaks = c("darkblue", "lightblue", "aliceblue"), values = c(.025, .5, .1))
ggplot(data.frame(n = c(0, 2000)), aes(x = n)) +
stat_function(fun = plotbud, args = list(tau = .025), aes(color = "darkblue"), lwd = 2) +
stat_function(fun = plotbud, args = list(tau = .05), aes(color = "lightblue"), lwd =2 ) +
stat_function(fun = plotbud, args = list(tau = .1), aes(color = "aliceblue"), lwd = 2) +
scale_y_continuous("Budget") + scale_color_manual("tau", breaks = c("darkblue", "lightblue", "aliceblue"), values = c(.025, .5, .1))
ggplot(data.frame(n = c(0, 2000)), aes(x = n)) +
stat_function(fun = plotbud, args = list(tau = .025), aes(color = "darkblue"), lwd = 2) +
stat_function(fun = plotbud, args = list(tau = .05), aes(color = "lightblue"), lwd =2 ) +
stat_function(fun = plotbud, args = list(tau = .1), aes(color = "aliceblue"), lwd = 2) +
scale_y_continuous("Budget") + scale_color_manual("tau", breaks = c(.025, .5, .1))
ggplot(data.frame(n = c(0, 2000)), aes(x = n)) +
stat_function(fun = plotbud, args = list(tau = .025), aes(color = "darkblue"), lwd = 2) +
stat_function(fun = plotbud, args = list(tau = .05), aes(color = "lightblue"), lwd =2 ) +
stat_function(fun = plotbud, args = list(tau = .1), aes(color = "aliceblue"), lwd = 2) +
scale_y_continuous("Budget") + scale_color_manual("tau", values = c(.025, .5, .1))
ggplot(data.frame(n = c(0, 2000)), aes(x = n)) +
stat_function(fun = plotbud, args = list(tau = .025), aes(color = "darkblue"), lwd = 2) +
stat_function(fun = plotbud, args = list(tau = .05), aes(color = "lightblue"), lwd =2 ) +
stat_function(fun = plotbud, args = list(tau = .1), aes(color = "aliceblue"), lwd = 2) +
scale_y_continuous("Budget") + scale_color_discrete("tau", values = c(.025, .5, .1))
ggplot(data.frame(n = c(0, 2000)), aes(x = n)) +
stat_function(fun = plotbud, args = list(tau = .025), aes(color = .025), lwd = 2) +
stat_function(fun = plotbud, args = list(tau = .05), aes(color = .5), lwd =2 ) +
stat_function(fun = plotbud, args = list(tau = .1), aes(color = .1), lwd = 2) +
scale_y_continuous("Budget") + scale_color_discrete("tau")
ggplot(data.frame(n = c(0, 2000)), aes(x = n)) +
stat_function(fun = plotbud, args = list(tau = .025), aes(color = .025), lwd = 2) +
stat_function(fun = plotbud, args = list(tau = .05), aes(color = .5), lwd =2 ) +
stat_function(fun = plotbud, args = list(tau = .1), aes(color = .1), lwd = 2) +
scale_y_continuous("Budget") + scale_color_manual("tau")
ggplot(data.frame(n = c(0, 2000)), aes(x = n)) +
stat_function(fun = plotbud, args = list(tau = .025), aes(color = ".025"), lwd = 2) +
stat_function(fun = plotbud, args = list(tau = .05), aes(color = ".5"), lwd =2 ) +
stat_function(fun = plotbud, args = list(tau = .1), aes(color = ".1"), lwd = 2) +
scale_y_continuous("Budget") + scale_color_manual("tau")
ggplot(data.frame(n = c(0, 2000)), aes(x = n)) +
stat_function(fun = plotbud, args = list(tau = .025), aes(color = ".025"), lwd = 2) +
stat_function(fun = plotbud, args = list(tau = .05), aes(color = ".5"), lwd =2 ) +
stat_function(fun = plotbud, args = list(tau = .1), aes(color = ".1"), lwd = 2) +
scale_y_continuous("Budget") + scale_color_manual("tau", values = c("blue", "lightblue", "aliceblue"))
ggplot(data.frame(n = c(0, 2000)), aes(x = n)) +
stat_function(fun = plotbud, args = list(tau = .025), aes(color = ".025"), lwd = 2) +
stat_function(fun = plotbud, args = list(tau = .05), aes(color = ".5"), lwd =2 ) +
stat_function(fun = plotbud, args = list(tau = .1), aes(color = ".1"), lwd = 2) +
scale_y_continuous("Budget") + scale_color_manual("tau", values = c("blue", "aliceblue", "lightblue"))
ggplot(data.frame(n = c(0, 2000)), aes(x = n)) +
stat_function(fun = plotbud, args = list(tau = .025), aes(color = "0.025"), lwd = 2) +
stat_function(fun = plotbud, args = list(tau = .05), aes(color = "0.05"), lwd =2 ) +
stat_function(fun = plotbud, args = list(tau = .1), aes(color = "0.01"), lwd = 2) +
scale_y_continuous("Budget") + scale_color_manual("tau", breaks = c("0.025", "0.05", "0.1"), values = c("blue", "aliceblue", "lightblue"))
ggplot(data.frame(n = c(0, 2000)), aes(x = n)) +
stat_function(fun = plotbud, args = list(tau = .025), aes(color = "0.025"), lwd = 2) +
stat_function(fun = plotbud, args = list(tau = .05), aes(color = "0.05"), lwd =2 ) +
stat_function(fun = plotbud, args = list(tau = .1), aes(color = "0.1"), lwd = 2) +
scale_y_continuous("Budget") + scale_color_manual("tau", breaks = c("0.025", "0.05", "0.1"), values = c("blue", "aliceblue", "lightblue"))
ggplot(data.frame(n = c(0, 2000)), aes(x = n)) +
stat_function(fun = plotbud, args = list(tau = .025), aes(color = "0.025"), lwd = 2) +
stat_function(fun = plotbud, args = list(tau = .05), aes(color = "0.05"), lwd =2 ) +
stat_function(fun = plotbud, args = list(tau = .1), aes(color = "0.1"), lwd = 2) +
scale_y_continuous("Budget") + scale_color_manual("tau", breaks = c("0.025", "0.05", "0.1"), values = c("blue", "lightblue", "aliceblue"))
devtools::install_github("ramnathv/rblocks")
load("nosignal-result.RData")
library(ggplot2)
library(reshape2)
plotme <- function(nosignal, dex){
nosigsum <- merge(melt(nosignal$mean[, dex], id.vars = "krange"),
melt(as.data.frame(nosignal$sd[, dex]), id.vars = "krange"),
by = c("krange", "variable"))
colnames(nosigsum) <- c("krange", "setting", "error", "sd")
ggplot(nosigsum, aes(x = krange, y = error, ymin = error - sd, ymax = error + sd,
shape = setting, color = setting, fill = setting)) +
geom_point() + geom_line() + geom_ribbon(color = NA, alpha = .2) +
scale_color_brewer(type = "qual", palette = 2) + scale_fill_brewer(type = "qual", palette = 2)
}
plotme <- function(nosignal, dex){
dex <- c(1, dex)
nosigsum <- merge(melt(nosignal$mean[, dex], id.vars = "krange"),
melt(as.data.frame(nosignal$sd[, dex]), id.vars = "krange"),
by = c("krange", "variable"))
colnames(nosigsum) <- c("krange", "setting", "error", "sd")
ggplot(nosigsum, aes(x = krange, y = error, ymin = error - sd, ymax = error + sd,
shape = setting, color = setting, fill = setting)) +
geom_point() + geom_line() + geom_ribbon(color = NA, alpha = .2) +
scale_color_brewer(type = "qual", palette = 2) + scale_fill_brewer(type = "qual", palette = 2)
}
plotme(nosignal, c(2, 3, 5))
plotme(nosignal, c(2, 3, 4, 5))
